?start: program

program: macro* decl+

?macro: IMPORT STRINGCONSTANT
    | DEFINE IDENT*

?decl: variable_decl
    | function_decl
    | class_decl
    | interface_decl

?variable_decl: variable ";"

variable: type IDENT

type.-1: INT
    | DOUBLE
    | BOOL
    | STRING
    | IDENT
    | type "[" "]" -> array_type

function_decl: type IDENT "(" formals ")" statement_block
    | VOID IDENT "(" formals ")" statement_block

formals: variable ("," variable)*
    |

class_decl: CLASS IDENT (EXTENDS IDENT)? (IMPLEMENTS IDENT ("," IDENT)*)?  "{" field* "}"

field: access_modifier variable_decl
    | access_modifier function_decl

access_modifier: PRIVATE
    | PROTECTED
    | PUBLIC
    |

interface_decl: INTERFACE IDENT "{" prototype* "}"

prototype: type IDENT "(" formals ")" ";"
    | VOID IDENT "(" formals ")" ";"

statement_block: "{" variable_decl* statement* "}" -> stmt_block

?statement: expr? ";"
    | if_stmt
    | while_stmt
    | for_stmt
    | return_stmt
    | break_stmt
    | continue_stmt
    | print_stmt
    | statement_block

if_stmt: IF "(" expr ")" statement (ELSE statement)?

while_stmt: WHILE "(" expr ")" statement

!for_stmt: FOR "(" ";" expr ";" ")" statement -> for_1
    | FOR "(" expr ";" expr ";" ")" statement -> for_2
    | FOR "(" ";" expr ";" expr ")" statement -> for_3
    | FOR "(" expr ";" expr ";" expr ")" statement -> for_4

return_stmt: RETURN expr? ";"

break_stmt: BREAK ";"

continue_stmt: CONTINUE ";"

print_stmt: PRINT "(" actuals ")" ";"

?expr: l_value "=" expr -> assign
    | expr0

?expr0: expr0 "||" expr1 -> logical_or
    | expr1

?expr1: expr1 "&&" expr2 -> logical_and
    | expr2

?expr2: expr2 "!=" expr3 -> logical_not_equal
    | expr2 "==" expr3 -> logical_equal
    | expr3

?expr3: expr3 "<" expr4 ->logical_less_than
    | expr3 ">" expr4 -> logical_greater_than
    | expr3 "<=" expr4 -> logical_less_than_or_equal
    | expr3 ">=" expr4 -> logical_greater_than_or_equal
    | expr4

?expr4: expr4 "+" expr5 -> add
    | expr4 "-" expr5 -> sub
    | expr5

?expr5: expr5 "*" expr6 -> mul
    | expr5 "/" expr6 -> div
    | expr5 "%" expr6 -> module
    | expr6

?expr6: "!" expr6 -> logical_not
    | "-" expr6 -> unary_neg
    | expr7

?expr7: constant
    | "NewArray" "(" expr "," type ")" -> new_array
    | "ReadInteger" "(" ")" -> read_int
    | "ReadLine" "(" ")" -> read_line
    | NEW IDENT -> new_identifier
    | "(" expr ")"
    | l_value
    | call
    | ITOD "(" expr ")" -> int_to_double
    | DTOI "(" expr ")" -> double_to_int
    | ITOB "(" expr ")" -> int_to_bool
    | BTOI "(" expr ")" -> bool_to_int
    | THIS -> l_value_ident



l_value : IDENT -> l_value_ident
    | expr7 "." IDENT -> l_value_class_field
    | expr7 "[" expr "]" -> l_value_array


call : IDENT  "(" actuals ")"
    |  expr7  "."  IDENT  "(" actuals ")" -> method_call


actuals: expr ("," expr)*
    |


constant: INTCONSTANT
    | DOUBLECONSTANT
    | BOOLCONSTANT
    | STRINGCONSTANT
    | NULL


EXTENDS: "extends"
IMPLEMENTS: "implements"
CLASS: "class"
IMPORT: "import"
DEFINE: "define"
INT: "int"
BOOL: "bool"
DOUBLE: "double"
STRING : "string"
PRIVATE: "private"
PROTECTED: "protected"
PUBLIC: "public"
WHILE: "while"
IF: "if"
ELSE: "else"
FOR: "for"
VOID: "void"
RETURN: "return"
BREAK: "break"
CONTINUE: "continue"
INTERFACE: "interface"
PRINT: "Print"
THIS: "this"
READINTEGER: "ReadInteger"
READLINE : "ReadLine"
NEWARRAY : "NewArray"
ITOD : "itod"
DTOI : "dtoi"
ITOB : "itob"
BTOI : "btoi"
NULL : "null"
NEW: "new"

INTCONSTANT: /(0x|0X)[0-9a-fA-F]+|([0-9]+)/
DOUBLECONSTANT: /[-+]?\d+\.\d*(?:[eE][-+]?\d+)?/
BOOLCONSTANT:  /\b(false|true)\b/
STRINGCONSTANT:  /\"[^\n\"]*\"/
IDENT: /(?!(extends|implements|class|int|bool|double|string|private|protected|public|while|if|else|for|void|return|break|continue|interface|Print|this|ReadInteger|ReadLine|NewArray|itod|dtoi|itob|btoi|null|new|true|false)\b)[a-zA-Z]\w*/

COMMENT: /\/\/[^\n]*/
    | "/*" /.*?/s "*/"

%import common.NEWLINE
%import common.WS_INLINE

%ignore WS_INLINE
%ignore NEWLINE
%ignore COMMENT
